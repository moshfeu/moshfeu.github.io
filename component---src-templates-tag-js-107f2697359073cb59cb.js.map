{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-blog/src/components/post-link.js","webpack:///./node_modules/gatsby-theme-blog/src/components/post-list.js","webpack:///./src/templates/tag.js","webpack:///./src/gatsby-theme-blog/components/seo.js"],"names":["PostLink","title","slug","date","excerpt","h2","sx","mb","a","as","Link","textDecoration","to","p","PostList","posts","map","node","key","pageQuery","CategoryTemplate","location","pageContext","data","allMdxBlogPost","nodes","totalCount","site","siteMetadata","tag","className","SEO","description","lang","meta","imageSource","imageAlt","canonical","useStaticQuery","metaDescription","image","siteUrl","imageAltText","name","content","property","author","concat","htmlAttributes","titleTemplate","link","rel","href","defaultProps"],"mappings":"kLA8BeA,EA1BE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,QAAtB,OACf,2BACE,0BACE,YAAC,IAAOC,GAAR,CACEC,GAAI,CACFC,GAAI,IAGN,YAAC,IAAOC,EAAR,CACEC,GAAIC,IACJJ,GAAI,CACFK,eAAe,QAEjBC,GAAIV,GAEHD,GAASC,IAGd,yBAAQC,IAEV,2BACE,YAAC,IAAOU,EAAR,KAAWT,MCbFU,IARE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACf,8BACGA,EAAMC,KAAI,SAACC,GAAD,OACT,YAAC,EAAD,aAAUC,IAAKD,EAAKf,MAAUe,U,kCCPpC,+GA6BaE,EAAS,aAmBPC,UAzCU,SAAC,GASnB,IARLC,EAQI,EARJA,SACAC,EAOI,EAPJA,YAOI,IANJC,KAMI,IALFC,eAAyBT,EAKvB,EALgBU,MAAcC,EAK9B,EAL8BA,WAEdzB,EAGhB,EAJF0B,KACEC,aAAgB3B,MAIZ4B,EAAQP,EAARO,IACR,OACE,YAAC,IAAD,CAAQR,SAAUA,EAAUpB,MAAOA,GACjC,mBAAK6B,UAAU,iBACb,YAAC,IAAD,CAAK7B,MAAK,iBAAmB4B,EAAnB,MACV,8BAAUA,EAAV,KAAiBH,EAAjB,QAAkCA,EAAa,EAAI,IAAM,GAAzD,KACA,YAAC,IAAD,CAAUX,MAAOA,Q,2GChBzB,SAASgB,EAAT,GAQI,IAPFC,EAOC,EAPDA,YACAC,EAMC,EANDA,KACAC,EAKC,EALDA,KACAjC,EAIC,EAJDA,MACAkC,EAGC,EAHDA,YACAC,EAEC,EAFDA,SACAC,EACC,EADDA,UAEQV,EAASW,YAAe,aAAxBX,KAeFY,EAAkBP,GAAeL,EAAKC,aAAaI,YACnDQ,EAAQL,EAAW,GAClBR,EAAKC,aAAaa,QAAUN,EAC/B,KACEO,EAAeN,GAAYG,EAiEjC,OAhEAL,EAAO,sBACFA,GADE,CAEL,CACES,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAAS3C,GAEX,CACE4C,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASjB,EAAKC,aAAakB,QAE7B,CACEH,KAAK,gBACLC,QAAS3C,GAEX,CACE0C,KAAK,sBACLC,QAASL,KAGVQ,OACCZ,EACI,CACE,CACEQ,KAAK,WACLC,QAASJ,GAEX,CACEG,KAAK,eACLC,QAASF,GAEX,CACEC,KAAK,gBACLC,QAASJ,GAEX,CACEG,KAAK,oBACLC,QAASF,GAEX,CACEC,KAAK,eACLC,QAAQ,wBAGZ,CACE,CACED,KAAK,eACLC,QAAQ,aAIjBG,OAAOb,GAGR,YAAC,IAAD,CACEc,eAAgB,CACdf,QAEFhC,MAAOA,EACPgD,cAAa,QAAUtB,EAAKC,aAAa3B,MACzCiC,KAAMA,EACNgB,KACEb,EAAY,CAAC,CAAEc,IAAK,YAAajC,IAAKmB,EAAWe,KAAMf,IAAe,KAM9EN,EAAIsB,aAAe,CACjBpB,KAAK,KACLC,KAAM,IAYOH","file":"component---src-templates-tag-js-107f2697359073cb59cb.js","sourcesContent":["/** @jsx jsx */\nimport { Styled, jsx } from \"theme-ui\"\nimport { Link } from \"gatsby\"\n\nconst PostLink = ({ title, slug, date, excerpt }) => (\n  <article>\n    <header>\n      <Styled.h2\n        sx={{\n          mb: 1,\n        }}\n      >\n        <Styled.a\n          as={Link}\n          sx={{\n            textDecoration: `none`,\n          }}\n          to={slug}\n        >\n          {title || slug}\n        </Styled.a>\n      </Styled.h2>\n      <small>{date}</small>\n    </header>\n    <section>\n      <Styled.p>{excerpt}</Styled.p>\n    </section>\n  </article>\n)\n\nexport default PostLink\n","import React from \"react\"\n\nimport PostLink from \"./post-link\"\n\nconst PostList = ({ posts }) => (\n  <>\n    {posts.map((node) => (\n      <PostLink key={node.slug} {...node} />\n    ))}\n  </>\n)\n\nexport default PostList\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../gatsby-theme-blog/components/layout\"\nimport SEO from \"gatsby-theme-blog/src/components/seo\"\nimport PostList from \"gatsby-theme-blog/src/components/post-list\"\n\nconst CategoryTemplate = ({\n  location,\n  pageContext,\n  data: {\n    allMdxBlogPost: { nodes: posts, totalCount },\n    site: {\n      siteMetadata: { title },\n    },\n  },\n}) => {\n  const { tag } = pageContext\n  return (\n    <Layout location={location} title={title}>\n      <div className=\"tag-container\">\n        <SEO title={`Posts in tag \"${tag}\"`} />\n        <h1>Tag: {tag} ({totalCount} post{totalCount > 1 ? 's' : ''})</h1>\n        <PostList posts={posts} />\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query Tags($tag: [String]) {\n    allMdxBlogPost(filter: { tags: { in: $tag } }) {\n      nodes {\n        title\n        slug\n        excerpt\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n      totalCount,\n    },\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n\nexport default CategoryTemplate\n","// @ts-check\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({\n  description,\n  lang,\n  meta,\n  title,\n  imageSource,\n  imageAlt,\n  canonical,\n}) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const image = imageSource\n    ? `${site.siteMetadata.siteUrl}${imageSource}`\n    : null\n  const imageAltText = imageAlt || metaDescription\n  meta = [\n    ...meta,\n    {\n      name: `description`,\n      content: metaDescription,\n    },\n    {\n      property: `og:title`,\n      content: title,\n    },\n    {\n      property: `og:description`,\n      content: metaDescription,\n    },\n    {\n      property: `og:type`,\n      content: `website`,\n    },\n    {\n      name: `twitter:creator`,\n      content: site.siteMetadata.author,\n    },\n    {\n      name: `twitter:title`,\n      content: title,\n    },\n    {\n      name: `twitter:description`,\n      content: metaDescription,\n    },\n  ]\n    .concat(\n      imageSource\n        ? [\n            {\n              name: `og:image`,\n              content: image,\n            },\n            {\n              name: `og:image:alt`,\n              content: imageAltText,\n            },\n            {\n              name: `twitter:image`,\n              content: image,\n            },\n            {\n              name: `twitter:image:alt`,\n              content: imageAltText,\n            },\n            {\n              name: `twitter:card`,\n              content: `summary_large_image`,\n            },\n          ]\n        : [\n            {\n              name: `twitter:card`,\n              content: `summary`,\n            },\n          ]\n    )\n    .concat(meta)\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={meta}\n      link={\n        canonical ? [{ rel: \"canonical\", key: canonical, href: canonical }] : []\n      }\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  title: PropTypes.string.isRequired,\n  imageSource: PropTypes.string,\n  canonical: PropTypes.string,\n}\n\nexport default SEO\n"],"sourceRoot":""}