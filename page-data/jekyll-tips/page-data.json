{"componentChunkName":"component---src-components-post-js","path":"/jekyll-tips/","result":{"data":{"site":{"siteMetadata":{"title":"Moshe Feuchtwanger","social":[{"name":"twitter","url":"https://twitter.com/moshfeu"},{"name":"github","url":"https://github.com/moshfeu"},{"name":"linkedin","url":"https://www.linkedin.com/in/moshfeu/"},{"name":"stackoverflow","url":"https://stackoverflow.com/users/863110/mosh-feu"},{"name":"visualstudiocode","url":"https://marketplace.visualstudio.com/publishers/moshfeu"}]}},"mdx":{"id":"6b639e50-ff65-59a1-bf7e-af49ba9f7c56","excerpt":"To present tag posts count use  tag[1].size To display a  ruby  code but prevent compiler from render it, use  {% raw %}","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Jekyll Tips\",\n  \"tags\": [\"jekyll\", \"github-pages\", \"quick-tips\", \"tags\"],\n  \"slug\": \"jekyll-tips\",\n  \"date\": \"2018-10-28T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"To present tag posts count use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tag[1].size\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"{% for tag in site.tags %}\\n  <li><a href=\\\"/path_to_tags/{{ tag[0] | slugify }}\\\">{{ tag[0] }}</a> <{{tag[1].size}}></li>\\n{% endfor %}\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"To display a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ruby\"), \" code but prevent compiler from render it, use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{% raw %}\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"{% raw %}\\n  {% for tag in site.tags %}\\n  ...\\n  {% endfor %}\\n{% endraw %}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"jekyll-tips","frontmatter":{"canonical":null,"title":"Jekyll Tips","subtitle":null,"keywords":null,"tags":["jekyll","github-pages","quick-tips","tags"],"date":"October 28, 2018","image":null},"childMdxBlogPost":{"imageAlt":null,"imageCaptionLink":null,"imageCaptionText":null,"socialImage":null}},"previous":{"__typename":"MdxBlogPost","id":"6eb0697b-b46b-563c-b028-c87c60ff45a5","excerpt":"The problem I'm using  webpack  for compiling and bundling in one hand. In the other hand I'm using  jest  for testing. I want to run the…","slug":"/run-tests-after-compile-webpack/","title":"How to run tests after compile webpack","date":"October 27, 2018"},"next":{"__typename":"MdxBlogPost","id":"c8683e37-31b2-527c-a4b8-9beb1aba3fd7","excerpt":"The problem In each project must be a command the start it, usually this command is been store under  start  script in  package.json…","slug":"/run-multiple-watch-scripts-parallel/","title":"How to run multiple watch scripts in parallel","date":"December 05, 2018"}},"pageContext":{"id":"5b71aa3a-567c-5d8c-b4fd-663597a8e236","previousId":"6eb0697b-b46b-563c-b028-c87c60ff45a5","nextId":"c8683e37-31b2-527c-a4b8-9beb1aba3fd7","maxWidth":1380,"slug":"jekyll-tips"}},"staticQueryHashes":["2744905544","3090755652","4064581832","511549514","764694655"]}